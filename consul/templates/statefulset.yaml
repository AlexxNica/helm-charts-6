apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: "{{ template "name" . }}"
  labels:
    app: {{ template "name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
spec:
  serviceName: "{{ template "name" . }}"
  replicas: {{ .Values.api.replicas }}
  template:
    metadata:
      name: "{{ template "name" . }}"
      labels:
        app: {{ template "name" . }}
        release: {{ .Release.Name }}
    spec:
      securityContext:
        fsGroup: 1000
      containers:
      - name: "{{ template "name" . }}"
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        ports:
        - name: http
          protocol: "TCP"
          containerPort: 8500
        - name: rpc
          protocol: "TCP"
          containerPort: {{ .Values.rpc.port }}
        - name: serf-lan-tcp
          protocol: "TCP"
          containerPort: {{ .Values.serf.lan.tcp.port }}
        - name: serf-lan-udp
          protocol: "UDP"
          containerPort: {{ .Values.serf.lan.udp.port }}
        - name: serf-wan-tcp
          protocol: "TCP"
          containerPort: {{ .Values.serf.wan.tcp.port }}
        - name: serf-wan-udp
          protocol: "UDP"
          containerPort: {{ .Values.serf.wan.udp.port }}
        - name: api
          protocol: "TCP"
          containerPort: 8300
        - name: consul-dns-tcp
          protocol: "TCP"
          containerPort: {{ .Values.dns.port }}
        - name: consul-dns-udp
          protocol: "UDP"
          containerPort: {{ .Values.dns.port }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        env:
        - name: INITIAL_CLUSTER_SIZE
          value: {{ .Values.api.replicas | quote }}
        - name: STATEFULSET_NAME
          value: "{{ template "name" . }}"
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: STATEFULSET_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: DNSPORT
          value: "{{ .Values.dns.port }}"
        volumeMounts:
        - name: datadir
          mountPath: /var/lib/consul
        - name: gossip-key
          mountPath: /etc/consul/secrets
          readOnly: true
        livenessProbe:
          exec:
            command:
            - consul
            - members
          initialDelaySeconds: 300
          timeoutSeconds: 5
        command:
          - "/bin/sh"
          - "-ec"
          - |
            IP=$(hostname -i)

            {{- if .Values.api.gossip.encrypt }}
            if [ -e /etc/consul/secrets/gossip-key ]; then
              echo "{\"encrypt\": \"$(base64 /etc/consul/secrets/gossip-key)\"}" > /etc/consul/encrypt.json
              GOSSIP_KEY="-config-file /etc/consul/encrypt.json"
            fi
            {{- end }}

            for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
                while true; do
                    echo "Waiting for ${STATEFULSET_NAME}-${i}.${STATEFULSET_NAME}-api to come up"
                    ping -W 1 -c 1 ${STATEFULSET_NAME}-${i}.${STATEFULSET_NAME}-api.${STATEFULSET_NAMESPACE}.svc > /dev/null && break
                    sleep 1s
                done
            done

            PEERS=""
            for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
                PEERS="${PEERS}${PEERS:+ } -retry-join $(ping -c 1 ${STATEFULSET_NAME}-${i}.${STATEFULSET_NAME}-api.${STATEFULSET_NAMESPACE}.svc | awk -F'[()]' '/PING/{print $2}')"
            done

            exec /bin/consul agent \
            {{- if .Values.ui.service.enabled }}
              -ui \
            {{- end }}
            {{- if .Values.api.dataCenter.name }}
              -datacenter {{ .Values.api.dataCenter.name }} \
            {{- end }}
              -data-dir=/var/lib/consul \
              -server \
              -bootstrap-expect=${INITIAL_CLUSTER_SIZE} \
              -bind=0.0.0.0 \
              -advertise=${IP} \
              ${PEERS} \
            {{- if .Values.api.gossip.encrypt }}
              ${GOSSIP_KEY} \
            {{- end }}
              -client=0.0.0.0 \
              -dns-port=${DNSPORT}
      volumes:
      - name: gossip-key
        secret:
          secretName: {{ template "name" . }}-gossip-key
  volumeClaimTemplates:
  - metadata:
      name: datadir
      annotations:
      {{- if .Values.api.storage.class }}
        volume.beta.kubernetes.io/storage-class: {{ .Values.api.storage.class | quote }}
      {{- else }}
        volume.alpha.kubernetes.io/storage-class: default
      {{- end }}
    spec:
      accessModes:
      - "ReadWriteOnce"
      resources:
        requests:
          storage: "{{ .Values.api.storage.size }}"
